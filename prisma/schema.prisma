generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  CONTENTCREATOR
  USER
}

model User {
  id                         Int                                       @id @default(autoincrement())
  email                      String                                    @unique
  isEmailConfirmed           Boolean                                   @default(false)
  phoneNumber                String                                    @unique
  isPhoneNumberConfirmed     Boolean                                   @default(false)
  password                   String
  status                     UserStatus                                @default(PENDING)
  isAdmin                    Boolean                                   @default(false)
  isContentCreator           Boolean                                   @default(false)
  contentCreator             ContentCreator?
  roles                      Role[]                                    @default([USER])
  watchLaters                UserMovieWatchLater[]
  singleMoviePurchases       UserPremieringSingleMoviePurchase[]
  seriesMovieSeasonPurchases UserPremieringSeriesMovieSeasonPurchase[]
  subscriptionPackage        UserSubscriptionPackage?
  privateFiles               PrivateFile[]
  publicFiles                PublicFile[]
  messages                  Message[]
  createdAt                  DateTime                                  @default(now())
  updatedAt                  DateTime                                  @updatedAt
}

model ContentCreator {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId       Int           @unique
  SingleMovies SingleMovie[]
  seriesMovies SeriesMovie[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PrivateFile {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PublicFile {
  id        Int      @id @default(autoincrement())
  url       String   @unique // Public file url
  key       String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  singleMovies SingleMovie[]
  seriesMovies SeriesMovie[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Language {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  singleMovies SingleMovie[]
  seriesMovies SeriesMovie[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// To allow movie files to be uploaded individually as updates to the movie 
// The poster, trailer & video are set to optional 

model SingleMovie {
  id                      Int                                 @id @default(autoincrement())
  title                   String
  description             String
  duration                String
  posterUrl               String?
  trailerKey              String?
  videoKey                String?
  filesFolder             String?
  singleMovieFiles        SingleMovieFiles[]
  isReleased              Boolean                             @default(false)
  isPremiering            Boolean                             @default(true)
  price                   Int?
  genres                  Genre[]
  languages               Language[]
  views                   Int                                 @default(0)
  contentCreator          ContentCreator                      @relation(fields: [contentCreatorId], references: [id])
  contentCreatorId        Int
  userPremieringPurchases UserPremieringSingleMoviePurchase[]
  userWatchLaters         UserMovieWatchLater[]
  createdAt               DateTime                            @default(now())
  updatedAt               DateTime                            @updatedAt
}

enum MovieFileType {
  POSTER
  TRAILER
  VIDEO
}

model SingleMovieFiles {
  id            Int           @id @default(autoincrement())
  singleMovie   SingleMovie   @relation(fields: [singleMovieId], references: [id], onDelete: Cascade)
  singleMovieId Int
  fileKey       String        @unique
  fileType      MovieFileType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SeriesMovie {
  id               Int                   @id @default(autoincrement())
  title            String
  description      String
  posterUrl        String?
  trailerKey       String?
  filesFolder      String?
  seriesMovieFiles SeriesMovieFiles[]
  isReleased       Boolean               @default(false)
  isPremiering     Boolean               @default(false)
  views            Int                   @default(0)
  genres           Genre[]
  languages        Language[]
  seasons          SeriesSeason[]
  contentCreator   ContentCreator        @relation(fields: [contentCreatorId], references: [id])
  contentCreatorId Int
  userWatchLater   UserMovieWatchLater[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model SeriesMovieFiles {
  id            Int           @id @default(autoincrement())
  seriesMovie   SeriesMovie   @relation(fields: [seriesMovieId], references: [id], onDelete: Cascade)
  seriesMovieId Int
  fileKey       String        @unique
  fileType      MovieFileType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SeriesSeason {
  id                      Int                                       @id @default(autoincrement())
  seriesMovie             SeriesMovie                               @relation(fields: [seriesMovieId], references: [id], onDelete: Cascade)
  seriesMovieId           Int
  seasonNumber            Int
  title                   String
  description             String
  posterUrl               String?
  trailerKey              String?
  filesFolder             String?
  seriesSeasonFiles       SeriesSeasonFiles[]
  isPremiering            Boolean                                   @default(false)
  price                   Int?
  views                   Int                                       @default(0)
  userPremieringPurchases UserPremieringSeriesMovieSeasonPurchase[]
  episodes                SeasonEpisode[]
  createdAt               DateTime                                  @default(now())
  updatedAt               DateTime                                  @updatedAt
}

model SeriesSeasonFiles {
  id             Int           @id @default(autoincrement())
  seriesSeason   SeriesSeason  @relation(fields: [seriesSeasonId], references: [id], onDelete: Cascade)
  seriesSeasonId Int
  fileKey        String        @unique
  fileType       MovieFileType
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model SeasonEpisode {
  id                 Int                  @id @default(autoincrement())
  season             SeriesSeason         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId           Int
  episodeNumber      Int
  title              String
  description        String
  duration           String
  posterUrl          String?
  videoKey           String?
  filesFolder        String?
  seasonEpisodeFiles SeasonEpisodeFiles[]
  views              Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model SeasonEpisodeFiles {
  id              Int           @id @default(autoincrement())
  seasonEpisode   SeasonEpisode @relation(fields: [seasonEpisodeId], references: [id], onDelete: Cascade)
  seasonEpisodeId Int
  fileKey         String        @unique
  fileType        MovieFileType
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model UserMovieWatchLater {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  singleMovie   SingleMovie @relation(fields: [singleMovieId], references: [id])
  singleMovieId Int
  seriesMovie   SeriesMovie @relation(fields: [seriesMovieId], references: [id])
  seriesMovieId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserPremieringSingleMoviePurchase {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  singleMovie   SingleMovie @relation(fields: [singleMovieId], references: [id])
  singleMovieId Int
  mpesaReceiptNumber String
  amount         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserPremieringSeriesMovieSeasonPurchase {
  id                  Int          @id @default(autoincrement())
  user                User         @relation(fields: [userId], references: [id])
  userId              Int
  seriesMovieSeason   SeriesSeason @relation(fields: [seriesMovieSeasonId], references: [id])
  seriesMovieSeasonId Int
  mpesaReceiptNumber String
  amount         Int
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

enum PackageName {
  BASIC
  STANDARD
  PREMIUM
  PLATINUM
}

model SubscriptionPackage {
  id                Int                       @id @default(autoincrement())
  name              PackageName
  description       String
  duration          Int                       @default(1) // in months
  price             Int
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  userSubscriptions UserSubscriptionPackage[]
}

model UserSubscriptionPackage {
  id                    Int                 @id @default(autoincrement())
  user                  User                @relation(fields: [userId], references: [id])
  userId                Int                 @unique
  subscriptionPackage   SubscriptionPackage @relation(fields: [subscriptionPackageId], references: [id])
  subscriptionPackageId Int
  startDate             DateTime            @default(now())
  endDate               DateTime
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Message{
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  message       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  context   String   @default("debug")
  level     String
  message   String
  stack     String?
  createdAt DateTime @default(now())
}
