generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int           @id @default(autoincrement())
  email                  String        @unique()
  isEmailConfirmed       Boolean       @default(false)
  phoneNumber            String        @unique()
  isPhoneNumberConfirmed Boolean       @default(false)
  password               String
  status                 UserStatus    @default(PENDING)
  isAdmin                Boolean       @default(false)
  isContentCreator       Boolean       @default(false)
  privateFiles           PrivateFile[]
  publicFiles            PublicFile[]
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model PrivateFile {
  id        Int      @id @default(autoincrement())
  key       String  @unique()
  user      User?    @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
}

model PublicFile {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  key       String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
}

model Genre {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  singleMovies SingleMovie[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Language {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  singleMovies SingleMovie[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SingleMovie {
  id            Int        @id() @default(autoincrement())
  title         String     
  description   String     
  duration      String     
  posterUrl     String     
  trailerUrl    String     
  videoUrl      String     
  filesFolder   String     
  isPremiering  Boolean    @default(false)
  price         String     
  views         Int        @default(0)
  likeDislikeId Int        @default(0)
  genres        Genre[]
  languages     Language[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  context   String   @default("debug")
  message   String
  level     String
  createdAt DateTime @default(now())
}
